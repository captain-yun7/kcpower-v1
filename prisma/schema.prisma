// Doosan Robotics Clone - Prisma Schema
// Database: PostgreSQL (Neon)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ===========================
// NextAuth.js 관련
// ===========================

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   // 일반 로그인용 (bcrypt 해시)
  phone         String?
  company       String?   // 회사명
  position      String?   // 직책
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  inquiries     Inquiry[]
  downloads     UserDownload[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ===========================
// 제품 관련
// ===========================

model ProductSeries {
  id          String   @id @default(cuid())
  name        String   @unique // P-series, H-series, M-series, A-series, E-series
  displayName String   // 표시용 이름
  description String   @db.Text
  order       Int      // 정렬 순서
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products    Product[]

  @@map("product_series")
}

model Product {
  id           String        @id @default(cuid())
  seriesId     String
  name         String
  model        String        @unique // 모델명 (예: M0617, H2017)
  description  String        @db.Text
  payload      String?       // 가반하중
  reach        String?       // 작업반경
  repeatability String?      // 반복정밀도
  weight       String?       // 본체중량
  specs        Json?         // 상세 스펙 (JSON)
  features     Json?         // 주요 기능 (JSON array)
  imageUrl     String?
  thumbnailUrl String?
  brochureUrl  String?       // 제품 브로셔 PDF
  videoUrl     String?       // 제품 소개 영상
  order        Int           @default(0)
  isPublished  Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  series       ProductSeries @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  solutions    SolutionProduct[]

  @@map("products")
  @@index([seriesId])
}

// ===========================
// 솔루션 관련
// ===========================

model Solution {
  id          String   @id @default(cuid())
  title       String
  category    String   // 카테고리 (예: 제조, 물류, 서비스 등)
  description String   @db.Text
  content     String   @db.Text // 상세 내용 (HTML)
  imageUrl    String?
  thumbnailUrl String?
  videoUrl    String?
  caseStudy   String?  @db.Text // 적용 사례
  benefits    Json?    // 기대 효과 (JSON array)
  order       Int      @default(0)
  isPublished Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products    SolutionProduct[]

  @@map("solutions")
}

model SolutionProduct {
  id         String   @id @default(cuid())
  solutionId String
  productId  String
  createdAt  DateTime @default(now())

  solution Solution @relation(fields: [solutionId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([solutionId, productId])
  @@map("solution_products")
  @@index([solutionId])
  @@index([productId])
}

// ===========================
// 다운로드 자료
// ===========================

model DownloadCategory {
  id        String   @id @default(cuid())
  name      String   @unique
  order     Int      @default(0)
  createdAt DateTime @default(now())

  downloads Download[]

  @@map("download_categories")
}

model Download {
  id          String           @id @default(cuid())
  categoryId  String
  title       String
  description String?          @db.Text
  fileName    String
  fileUrl     String           // 파일 URL
  fileSize    Int              // 파일 크기 (bytes)
  fileType    String           // 파일 타입 (pdf, zip 등)
  version     String?          // 버전
  downloads   Int              @default(0) // 다운로드 수
  requireAuth Boolean          @default(false) // 로그인 필요 여부
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  category    DownloadCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  userDownloads UserDownload[]

  @@map("downloads")
  @@index([categoryId])
}

model UserDownload {
  id          String   @id @default(cuid())
  userId      String
  downloadId  String
  downloadedAt DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  download Download @relation(fields: [downloadId], references: [id], onDelete: Cascade)

  @@map("user_downloads")
  @@index([userId])
  @@index([downloadId])
}

// ===========================
// 뉴스 & 이벤트
// ===========================

model News {
  id          String   @id @default(cuid())
  title       String
  category    NewsCategory
  content     String   @db.Text // HTML 콘텐츠
  excerpt     String?  @db.Text // 요약
  thumbnailUrl String?
  imageUrl    String?
  author      String?
  isPinned    Boolean  @default(false) // 중요 뉴스 (상단 고정)
  views       Int      @default(0)     // 조회수
  publishedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("news")
  @@index([category])
  @@index([publishedAt])
}

enum NewsCategory {
  PRESS_RELEASE  // 보도자료
  EVENT          // 이벤트
  NOTICE         // 공지사항
  BLOG           // 블로그
}

// ===========================
// 교육 프로그램
// ===========================

model Training {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  content     String   @db.Text // 상세 내용 (HTML)
  duration    String?  // 교육 기간 (예: "2일", "5일")
  curriculum  Json?    // 커리큘럼 (JSON array)
  target      String?  @db.Text // 교육 대상
  price       Int?     // 교육 비용 (원)
  location    String?  // 교육 장소
  imageUrl    String?
  order       Int      @default(0)
  isPublished Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  schedules   TrainingSchedule[]

  @@map("trainings")
}

model TrainingSchedule {
  id          String   @id @default(cuid())
  trainingId  String
  startDate   DateTime
  endDate     DateTime
  capacity    Int      // 최대 인원
  enrolled    Int      @default(0) // 신청 인원
  status      TrainingStatus @default(OPEN)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  training    Training @relation(fields: [trainingId], references: [id], onDelete: Cascade)

  @@map("training_schedules")
  @@index([trainingId])
}

enum TrainingStatus {
  OPEN      // 모집 중
  CLOSED    // 마감
  COMPLETED // 종료
}

// ===========================
// 문의하기
// ===========================

model Inquiry {
  id          String        @id @default(cuid())
  userId      String?       // 비회원도 가능
  type        InquiryType
  name        String
  email       String
  phone       String?
  company     String?
  country     String?
  subject     String
  message     String        @db.Text
  status      InquiryStatus @default(PENDING)
  adminNote   String?       @db.Text // 관리자 메모
  respondedAt DateTime?     // 답변 시각
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("inquiries")
  @@index([userId])
  @@index([type])
  @@index([status])
}

enum InquiryType {
  PRODUCT       // 제품 문의
  PURCHASE      // 구매 문의
  PARTNERSHIP   // 파트너십
  SUPPORT       // 기술 지원
  OTHER         // 기타
}

enum InquiryStatus {
  PENDING   // 답변 대기
  ANSWERED  // 답변 완료
  CLOSED    // 종료
}

// ===========================
// 회사 정보
// ===========================

model CompanyInfo {
  id          String   @id @default(cuid())
  key         String   @unique // 설정 키 (예: about, vision, history)
  title       String?
  content     String   @db.Text // HTML 콘텐츠
  data        Json?    // 추가 데이터 (JSON)
  updatedAt   DateTime @updatedAt

  @@map("company_info")
}

// ===========================
// 배너 & 슬라이드
// ===========================

model Banner {
  id          String      @id @default(cuid())
  title       String
  description String?     @db.Text
  imageUrl    String
  mobileImageUrl String?  // 모바일용 이미지
  linkUrl     String?
  linkText    String?
  position    BannerPosition @default(HOME_MAIN)
  order       Int         @default(0)
  isActive    Boolean     @default(true)
  startDate   DateTime?   // 노출 시작일
  endDate     DateTime?   // 노출 종료일
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("banners")
  @@index([position])
}

enum BannerPosition {
  HOME_MAIN      // 메인 페이지 Hero
  HOME_SECONDARY // 메인 페이지 서브
  PRODUCTS       // 제품 페이지
  SOLUTIONS      // 솔루션 페이지
}
