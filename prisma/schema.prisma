// Private LMS - Prisma Schema
// Database: PostgreSQL (Supabase)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===========================
// NextAuth.js 관련
// ===========================

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   // 일반 로그인용 (bcrypt 해시)
  phone         String?
  role          Role      @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  purchases     Purchase[]
  enrollments   Enrollment[]
  progresses    Progress[]
  devices       Device[]
  inquiries     Inquiry[]

  @@map("users")
}

enum Role {
  STUDENT
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ===========================
// 강의 관련
// ===========================

model Course {
  id              String   @id @default(cuid())
  title           String
  description     String   @db.Text
  price           Int      // 가격 (원 단위)
  thumbnailUrl    String?
  instructorName  String
  instructorIntro String?  @db.Text
  isPublished     Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  videos          Video[]
  courseFiles     CourseFile[]
  purchases       Purchase[]
  enrollments     Enrollment[]

  @@map("courses")
}

model Video {
  id          String   @id @default(cuid())
  courseId    String
  vimeoUrl    String   // Vimeo 영상 URL
  vimeoId     String?  // Vimeo 영상 ID (API 호출용)
  title       String
  description String?  @db.Text
  duration    Int?     // 재생 시간 (초 단위)
  order       Int      // 영상 순서
  isPreview   Boolean  @default(false) // 미리보기 여부
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  course      Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progresses  Progress[]

  @@map("videos")
  @@index([courseId])
}

model CourseFile {
  id        String   @id @default(cuid())
  courseId  String
  fileName  String
  fileUrl   String   // Supabase Storage URL
  fileSize  Int      // 파일 크기 (bytes)
  createdAt DateTime @default(now())

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("course_files")
  @@index([courseId])
}

// ===========================
// 결제 관련
// ===========================

model Purchase {
  id        String         @id @default(cuid())
  userId    String
  courseId  String
  amount    Int            // 결제 금액
  status    PurchaseStatus @default(PENDING)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  payment     Payment?
  receipt     Receipt?
  taxInvoice  TaxInvoice?
  refund      Refund?

  @@map("purchases")
  @@index([userId])
  @@index([courseId])
}

enum PurchaseStatus {
  PENDING      // 입금 대기 (무통장입금)
  COMPLETED    // 결제 완료
  CANCELED     // 결제 취소
  REFUNDED     // 환불 완료
}

model Payment {
  id          String        @id @default(cuid())
  purchaseId  String        @unique
  paymentKey  String?       @unique // 토스페이먼츠 paymentKey
  orderId     String        @unique // 주문 번호
  method      PaymentMethod // 결제 수단
  status      PaymentStatus @default(PENDING)
  paidAt      DateTime?     // 결제 완료 시각
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  purchase      Purchase       @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  bankTransfer  BankTransfer?

  @@map("payments")
  @@index([paymentKey])
  @@index([orderId])
}

enum PaymentMethod {
  CARD           // 카드 결제
  BANK_TRANSFER  // 무통장입금
}

enum PaymentStatus {
  PENDING    // 대기 (무통장입금)
  COMPLETED  // 완료
  FAILED     // 실패
  CANCELED   // 취소
}

model BankTransfer {
  id                  String    @id @default(cuid())
  paymentId           String    @unique
  depositorName       String    // 입금자명
  expectedDepositDate DateTime  // 입금 예정일
  approvedAt          DateTime? // 승인 시각
  rejectedAt          DateTime? // 거절 시각
  rejectReason        String?   @db.Text
  createdAt           DateTime  @default(now())

  payment Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@map("bank_transfers")
}

model Receipt {
  id            String   @id @default(cuid())
  purchaseId    String   @unique
  receiptNumber String   @unique // 영수증 번호
  issuedAt      DateTime @default(now())

  purchase Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)

  @@map("receipts")
  @@index([receiptNumber])
}

model TaxInvoice {
  id              String           @id @default(cuid())
  purchaseId      String           @unique
  businessNumber  String           // 사업자등록번호
  companyName     String           // 상호명
  ceoName         String           // 대표자명
  address         String           // 사업장 주소
  businessType    String           // 업태
  businessCategory String          // 종목
  email           String           // 이메일 (발송용)
  issuedAt        DateTime?        // 발행 시각
  status          TaxInvoiceStatus @default(REQUESTED)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  purchase Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)

  @@map("tax_invoices")
}

enum TaxInvoiceStatus {
  REQUESTED // 발행 요청
  ISSUED    // 발행 완료
}

model Refund {
  id           String       @id @default(cuid())
  purchaseId   String       @unique
  reason       String       @db.Text // 환불 사유
  refundAmount Int          // 환불 금액
  accountBank  String?      // 환불 계좌 은행 (무통장입금용)
  accountNumber String?     // 환불 계좌 번호
  accountHolder String?     // 예금주
  status       RefundStatus @default(PENDING)
  requestedAt  DateTime     @default(now())
  processedAt  DateTime?    // 처리 완료 시각
  rejectReason String?      @db.Text

  purchase Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)

  @@map("refunds")
}

enum RefundStatus {
  PENDING   // 환불 대기
  APPROVED  // 승인
  REJECTED  // 거절
  COMPLETED // 완료
}

// ===========================
// 수강 관련
// ===========================

model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("enrollments")
  @@index([userId])
  @@index([courseId])
}

model Progress {
  id           String    @id @default(cuid())
  userId       String
  videoId      String
  lastPosition Int       @default(0) // 마지막 시청 위치 (초 단위)
  isCompleted  Boolean   @default(false) // 완료 여부
  completedAt  DateTime? // 완료 시각
  updatedAt    DateTime  @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
  @@map("progresses")
  @@index([userId])
  @@index([videoId])
}

// ===========================
// 기기 관리
// ===========================

model Device {
  id             String   @id @default(cuid())
  userId         String
  deviceId       String   // FingerprintJS 또는 고유 식별자
  deviceName     String   // 예: "Chrome on Windows"
  userAgent      String   @db.Text
  ipAddress      String?
  lastAccessedAt DateTime @default(now())
  createdAt      DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, deviceId])
  @@map("devices")
  @@index([userId])
}

// ===========================
// 커뮤니티
// ===========================

model Notice {
  id            String   @id @default(cuid())
  title         String
  content       String   @db.Text
  isPinned      Boolean  @default(false) // 중요 공지 (상단 고정)
  views         Int      @default(0)     // 조회수
  attachmentUrl String?  // 첨부파일 URL (Supabase Storage)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("notices")
}

// ===========================
// 고객센터
// ===========================

model Inquiry {
  id        String        @id @default(cuid())
  userId    String
  title     String
  content   String        @db.Text // Rich Text (HTML)
  isPrivate Boolean       @default(true) // 비밀글 여부
  status    InquiryStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  replies InquiryReply[]

  @@map("inquiries")
  @@index([userId])
}

enum InquiryStatus {
  PENDING  // 답변 대기
  ANSWERED // 답변 완료
}

model InquiryReply {
  id        String   @id @default(cuid())
  inquiryId String
  adminId   String   // 답변한 관리자 ID (User)
  content   String   @db.Text // Rich Text (HTML)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inquiry Inquiry @relation(fields: [inquiryId], references: [id], onDelete: Cascade)

  @@map("inquiry_replies")
  @@index([inquiryId])
}
